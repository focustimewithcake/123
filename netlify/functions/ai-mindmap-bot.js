// netlify/functions/ai-mindmap-bot.js
const MindMapAIBot = class {
  constructor() {
    this.vietnameseStopWords = new Set([
      'v√†', 'c·ªßa', 'l√†', 'c√≥', 'ƒë∆∞·ª£c', 'trong', 'ngo√†i', 'tr√™n', 'd∆∞·ªõi', 'v·ªõi',
      'nh∆∞', 'theo', 't·ª´', 'v·ªÅ', 'sau', 'tr∆∞·ªõc', 'khi', 'n·∫øu', 'th√¨', 'm√†',
      'n√†y', 'ƒë√≥', 'kia', 'ai', 'g√¨', 'n√†o', 'sao', 'v√¨', 't·∫°i', 'do', 'b·ªüi',
      'cho', 'ƒë·∫øn', 'l√™n', 'xu·ªëng', 'ra', 'v√†o', '·ªü', 't·∫°i', 'b·∫±ng', 'ƒëang',
      's·∫Ω', 'ƒë√£', 'r·∫•t', 'qu√°', 'c≈©ng', 'v·∫´n', 'c·ª©', 'ch·ªâ', 'm·ªói', 't·ª´ng'
    ]);

    this.MAX_TEXT_LENGTH = 1500;
  }

  generateMindMap(text, style = 'balanced', complexity = 'medium') {
    console.log('ü§ñ AI Bot ƒëang ph√¢n t√≠ch vƒÉn b·∫£n...');
    
    try {
      const cleanedText = this.cleanText(text);
      const mindmap = this.simpleButEffectiveAnalysis(cleanedText, style, complexity);
      
      return mindmap;
    } catch (error) {
      console.error('‚ùå L·ªói trong generateMindMap:', error);
      return this.getFallbackMindMap(text);
    }
  }

  // PH∆Ø∆†NG PH√ÅP ƒê∆†N GI·∫¢N NH∆ØNG HI·ªÜU QU·∫¢
  simpleButEffectiveAnalysis(text, style, complexity) {
    console.log('üîç Ph√¢n t√≠ch vƒÉn b·∫£n v·ªõi ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n...');
    
    // B∆∞·ªõc 1: T√°ch ƒëo·∫°n vƒÉn v√† c√¢u
    const paragraphs = this.splitParagraphs(text);
    const sentences = this.splitGoodSentences(text);
    
    console.log('üìä T√¨m th·∫•y:', paragraphs.length, 'ƒëo·∫°n vƒÉn,', sentences.length, 'c√¢u');
    
    // B∆∞·ªõc 2: T√¨m ch·ªß ƒë·ªÅ ch√≠nh t·ª´ c√¢u ƒë·∫ßu ti√™n
    const centralTopic = this.findCentralTopic(sentences);
    
    // B∆∞·ªõc 3: T·∫°o c√°c nh√°nh t·ª´ c√°c ƒëo·∫°n vƒÉn v√† c√¢u quan tr·ªçng
    const mainBranches = this.createSimpleBranches(paragraphs, sentences, centralTopic, style, complexity);
    
    // B∆∞·ªõc 4: T·∫°o keywords t·ª´ n·ªôi dung
    const keywords = this.extractSimpleKeywords(sentences);
    
    return {
      centralTopic,
      mainBranches,
      analysis: {
        totalParagraphs: paragraphs.length,
        totalSentences: sentences.length,
        totalWords: text.split(/\s+/).length,
        keywords: keywords.slice(0, 8),
        confidence: this.calculateSimpleConfidence(paragraphs.length, sentences.length),
        method: "Simple Effective Analysis"
      },
      metadata: {
        generatedBy: "AI Mind Map Bot ü§ñ",
        style: style,
        complexity: complexity,
        timestamp: new Date().toISOString(),
        version: "SIMPLE-EFFECTIVE-1.0"
      }
    };
  }

  // T√ÅCH ƒêO·∫†N VƒÇN ƒê∆†N GI·∫¢N
  splitParagraphs(text) {
    if (!text) return [];
    return text.split(/\n+/)
      .map(p => p.trim())
      .filter(p => p.length > 20)
      .slice(0, 6);
  }

  // T√ÅCH C√ÇU C√ì CH·∫§T L∆Ø·ª¢NG
  splitGoodSentences(text) {
    if (!text) return [];
    
    return text.split(/[.!?]+/)
      .map(s => s.trim())
      .filter(s => {
        // Ch·ªâ l·∫•y c√¢u c√≥ ch·∫•t l∆∞·ª£ng: ƒë·ªô d√†i h·ª£p l√Ω, kh√¥ng qu√° ng·∫Øn/d√†i
        const length = s.length;
        const wordCount = s.split(/\s+/).length;
        return length >= 15 && length <= 150 && wordCount >= 3 && wordCount <= 25;
      })
      .slice(0, 20);
  }

  // T√åM CH·ª¶ ƒê·ªÄ CH√çNH TH√îNG MINH
  findCentralTopic(sentences) {
    if (!sentences || sentences.length === 0) return "N·ªôi dung ch√≠nh";
    
    // ∆Øu ti√™n c√¢u ƒë·∫ßu ti√™n c√≥ ch·∫•t l∆∞·ª£ng
    if (sentences[0] && sentences[0].length >= 20 && sentences[0].length <= 80) {
      return this.shortenTopic(sentences[0]);
    }
    
    // T√¨m c√¢u c√≥ ƒë·ªô d√†i ph√π h·ª£p trong 5 c√¢u ƒë·∫ßu
    for (let i = 0; i < Math.min(5, sentences.length); i++) {
      const sentence = sentences[i];
      if (sentence.length >= 20 && sentence.length <= 80) {
        return this.shortenTopic(sentence);
      }
    }
    
    // Fallback: c√¢u ƒë·∫ßu ti√™n ƒë∆∞·ª£c r√∫t g·ªçn
    return sentences[0] ? this.shortenTopic(sentences[0]) : "N·ªôi dung ch√≠nh";
  }

  shortenTopic(topic) {
    if (!topic) return "N·ªôi dung ch√≠nh";
    
    let shortened = topic
      .replace(/^(v√†|nh∆∞ng|tuy nhi√™n|do ƒë√≥|v√¨ v·∫≠y|ƒë·∫ßu ti√™n|th·ª© nh·∫•t|sau ƒë√≥|ti·∫øp theo)\s+/i, '')
      .replace(/[.!?]+$/, '')
      .trim();
    
    // Gi·ªõi h·∫°n ƒë·ªô d√†i
    if (shortened.length > 40) {
      const words = shortened.split(/\s+/);
      if (words.length > 6) {
        shortened = words.slice(0, 5).join(' ') + '...';
      } else {
        shortened = shortened.substring(0, 37) + '...';
      }
    }
    
    return this.capitalizeFirst(shortened);
  }

  // T·∫†O C√ÅC NH√ÅNH ƒê∆†N GI·∫¢N NH∆ØNG CH·∫§T L∆Ø·ª¢NG
  createSimpleBranches(paragraphs, sentences, centralTopic, style, complexity) {
    const branches = [];
    const usedContent = new Set();
    const centralLower = centralTopic.toLowerCase();
    
    // S·ªë l∆∞·ª£ng nh√°nh d·ª±a tr√™n ƒë·ªô ph·ª©c t·∫°p
    const branchCount = this.getBranchCount(complexity);
    
    // Chi·∫øn l∆∞·ª£c 1: S·ª≠ d·ª•ng c√°c ƒëo·∫°n vƒÉn ƒë·∫ßu ti√™n l√†m nh√°nh ch√≠nh
    let branchIndex = 0;
    
    for (let i = 0; i < paragraphs.length && branchIndex < branchCount; i++) {
      const paragraph = paragraphs[i];
      const firstSentence = paragraph.split(/[.!?]+/)[0].trim();
      
      if (firstSentence && firstSentence.length > 15 && 
          !this.isTooSimilar(firstSentence, centralLower) &&
          !usedContent.has(firstSentence.toLowerCase())) {
        
        const branch = this.createBranchFromParagraph(paragraph, branchIndex, style, usedContent);
        if (branch && branch.subTopics.length > 0) {
          branches.push(branch);
          branchIndex++;
        }
      }
    }
    
    // Chi·∫øn l∆∞·ª£c 2: N·∫øu ch∆∞a ƒë·ªß nh√°nh, s·ª≠ d·ª•ng c√°c c√¢u quan tr·ªçng
    if (branches.length < branchCount) {
      for (let i = 0; i < sentences.length && branchIndex < branchCount; i++) {
        const sentence = sentences[i];
        if (sentence.length > 20 && 
            !this.isTooSimilar(sentence, centralLower) &&
            !usedContent.has(sentence.toLowerCase())) {
          
          const branch = this.createBranchFromSentence(sentence, branchIndex, style, usedContent, sentences);
          if (branch && branch.subTopics.length > 0) {
            branches.push(branch);
            branchIndex++;
          }
        }
      }
    }
    
    // Chi·∫øn l∆∞·ª£c 3: Fallback - t·∫°o nh√°nh m·∫∑c ƒë·ªãnh
    while (branches.length < 2) {
      const fallbackThemes = ['Th√¥ng tin ch√≠nh', 'Chi ti·∫øt quan tr·ªçng', '·ª®ng d·ª•ng th·ª±c t·∫ø'];
      const theme = fallbackThemes[branches.length] || `Nh√°nh ${branches.length + 1}`;
      
      branches.push({
        title: this.formatBranchTitle(theme, style, branches.length),
        subTopics: ['N·ªôi dung quan tr·ªçng', 'Th√¥ng tin chi ti·∫øt']
      });
    }
    
    return branches.slice(0, branchCount);
  }

  createBranchFromParagraph(paragraph, index, style, usedContent) {
    try {
      // L·∫•y c√¢u ƒë·∫ßu l√†m ti√™u ƒë·ªÅ nh√°nh
      const firstSentence = paragraph.split(/[.!?]+/)[0].trim();
      const branchTitle = this.formatBranchTitle(this.shortenTopic(firstSentence), style, index);
      
      // T√°ch c√°c c√¢u trong ƒëo·∫°n l√†m subtopics
      const sentencesInParagraph = paragraph.split(/[.!?]+/)
        .map(s => s.trim())
        .filter(s => s.length > 10 && s.length < 80)
        .slice(1, 4); // B·ªè c√¢u ƒë·∫ßu (ƒë√£ d√πng l√†m title), l·∫•y 3 c√¢u ti·∫øp theo
      
      const subTopics = sentencesInParagraph
        .map(sentence => this.cleanSubTopic(sentence))
        .filter(topic => topic && !usedContent.has(topic.toLowerCase()))
        .slice(0, 3);
      
      // ƒê√°nh d·∫•u n·ªôi dung ƒë√£ s·ª≠ d·ª•ng
      subTopics.forEach(topic => usedContent.add(topic.toLowerCase()));
      usedContent.add(firstSentence.toLowerCase());
      
      return {
        title: branchTitle,
        subTopics: subTopics.length > 0 ? subTopics : ['Th√¥ng tin chi ti·∫øt']
      };
    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o branch t·ª´ paragraph:', error);
      return null;
    }
  }

  createBranchFromSentence(sentence, index, style, usedContent, allSentences) {
    try {
      const branchTitle = this.formatBranchTitle(this.shortenTopic(sentence), style, index);
      
      // T√¨m c√°c c√¢u li√™n quan l√†m subtopics
      const relatedSentences = this.findRelatedSentences(sentence, allSentences, usedContent);
      
      const subTopics = relatedSentences
        .map(s => this.cleanSubTopic(s))
        .filter(topic => topic)
        .slice(0, 3);
      
      // ƒê√°nh d·∫•u n·ªôi dung ƒë√£ s·ª≠ d·ª•ng
      subTopics.forEach(topic => usedContent.add(topic.toLowerCase()));
      usedContent.add(sentence.toLowerCase());
      
      return {
        title: branchTitle,
        subTopics: subTopics.length > 0 ? subTopics : ['Th√¥ng tin b·ªï sung']
      };
    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o branch t·ª´ sentence:', error);
      return null;
    }
  }

  findRelatedSentences(mainSentence, allSentences, usedContent) {
    const mainWords = new Set(mainSentence.toLowerCase().split(/\s+/).filter(w => w.length > 3));
    const related = [];
    
    for (const sentence of allSentences) {
      if (sentence !== mainSentence && !usedContent.has(sentence.toLowerCase())) {
        const sentenceWords = new Set(sentence.toLowerCase().split(/\s+/));
        let commonWords = 0;
        
        mainWords.forEach(word => {
          if (sentenceWords.has(word)) commonWords++;
        });
        
        if (commonWords >= 1) { // C√≥ √≠t nh·∫•t 1 t·ª´ chung
          related.push(sentence);
          if (related.length >= 3) break;
        }
      }
    }
    
    return related;
  }

  isTooSimilar(text, centralLower) {
    const textLower = text.toLowerCase();
    if (textLower === centralLower) return true;
    
    const textWords = new Set(textLower.split(/\s+/).filter(w => w.length > 2));
    const centralWords = new Set(centralLower.split(/\s+/).filter(w => w.length > 2));
    
    let commonWords = 0;
    centralWords.forEach(word => {
      if (textWords.has(word)) commonWords++;
    });
    
    return commonWords >= 2;
  }

  formatBranchTitle(topic, style, index) {
    const stylePrefixes = {
      'academic': ['Ph√¢n t√≠ch', 'Nghi√™n c·ª©u', 'Kh√°i ni·ªám', '·ª®ng d·ª•ng'],
      'creative': ['√ù t∆∞·ªüng', 'Gi·∫£i ph√°p', 'Ph√°t tri·ªÉn', 'S√°ng t·∫°o'],
      'business': ['Chi·∫øn l∆∞·ª£c', 'K·∫ø ho·∫°ch', 'Gi·∫£i ph√°p', 'Tri·ªÉn khai'],
      'balanced': ['Kh√≠a c·∫°nh', 'G√≥c nh√¨n', 'Ph∆∞∆°ng di·ªán', 'Quan ƒëi·ªÉm']
    };
    
    const prefixes = stylePrefixes[style] || stylePrefixes.balanced;
    const prefix = prefixes[index % prefixes.length];
    
    return `${prefix}: ${topic}`;
  }

  cleanSubTopic(text) {
    if (!text) return null;
    
    try {
      let cleanText = text.trim();
      
      // Lo·∫°i b·ªè t·ª´ n·ªëi ·ªü ƒë·∫ßu
      cleanText = cleanText.replace(/^(v√†|nh∆∞ng|tuy nhi√™n|do ƒë√≥|v√¨ v·∫≠y|c√≥ th·ªÉ|ƒë∆∞·ª£c|l√†|c·ªßa|trong|v·ªÅ)\s+/i, '');
      
      // Gi·ªõi h·∫°n ƒë·ªô d√†i
      if (cleanText.length > 60) {
        const words = cleanText.split(/\s+/);
        const keepWords = Math.min(8, words.length);
        cleanText = words.slice(0, keepWords).join(' ') + '...';
      }
      
      return cleanText.length >= 8 ? cleanText : null;
    } catch (error) {
      return text;
    }
  }

  extractSimpleKeywords(sentences) {
    const wordFreq = new Map();
    
    sentences.forEach(sentence => {
      const words = sentence.toLowerCase().split(/\s+/)
        .filter(word => word.length > 3 && !this.vietnameseStopWords.has(word));
      
      words.forEach(word => {
        wordFreq.set(word, (wordFreq.get(word) || 0) + 1);
      });
    });
    
    return Array.from(wordFreq.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(entry => entry[0]);
  }

  calculateSimpleConfidence(paragraphCount, sentenceCount) {
    let confidence = 0;
    
    if (paragraphCount >= 1) confidence += 0.3;
    if (paragraphCount >= 2) confidence += 0.2;
    if (sentenceCount >= 5) confidence += 0.3;
    if (sentenceCount >= 10) confidence += 0.2;
    
    return Math.min(confidence, 0.9);
  }

  getBranchCount(complexity) {
    const counts = {
      'simple': 2,
      'medium': 3,
      'detailed': 4,
      'comprehensive': 4
    };
    return counts[complexity] || 3;
  }

  cleanText(text) {
    if (!text || typeof text !== 'string') return '';
    
    const limitedText = text.length > this.MAX_TEXT_LENGTH 
      ? text.substring(0, this.MAX_TEXT_LENGTH) + '...'
      : text;
    
    return limitedText
      .replace(/[^\w\s√Ä√Å√Ç√É√à√â√ä√å√ç√í√ì√î√ï√ô√ö√ù√†√°√¢√£√®√©√™√¨√≠√≤√≥√¥√µ√π√∫√ΩƒÇƒÉƒêƒëƒ®ƒ©≈®≈©∆†∆°∆Ø∆∞·∫†-·ªπ.,!?;:()-]/gu, ' ')
      .replace(/\s+/g, ' ')
      .trim();
  }

  capitalizeFirst(text) {
    if (!text) return '';
    return text.charAt(0).toUpperCase() + text.slice(1);
  }

  getFallbackMindMap(text = '') {
    const centralTopic = text ? this.shortenTopic(text.substring(0, 50)) : "N·ªôi dung ch√≠nh";
    
    return {
      centralTopic,
      mainBranches: [
        {
          title: "Th√¥ng tin ch√≠nh",
          subTopics: ["N·ªôi dung quan tr·ªçng 1", "N·ªôi dung quan tr·ªçng 2"]
        },
        {
          title: "Chi ti·∫øt b·ªï sung", 
          subTopics: ["Th√¥ng tin b·ªï sung 1", "Th√¥ng tin b·ªï sung 2"]
        }
      ],
      analysis: {
        totalParagraphs: 0,
        totalSentences: 0,
        totalWords: 0,
        keywords: ["th√¥ng tin", "n·ªôi dung"],
        confidence: 0.5,
        method: "Fallback Mode"
      },
      metadata: {
        generatedBy: "AI Mind Map Bot ü§ñ (Fallback Mode)",
        style: "balanced",
        complexity: "medium",
        timestamp: new Date().toISOString(),
        version: "FALLBACK-1.0"
      }
    };
  }
};

// Export function v·ªõi x·ª≠ l√Ω l·ªói ƒë∆°n gi·∫£n
exports.handler = async (event) => {
  console.log('=== AI MIND MAP BOT - SIMPLE EFFECTIVE VERSION ===');
  
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'POST, OPTIONS, GET',
    'Content-Type': 'application/json'
  };

  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  try {
    console.log('üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng...');
    
    let parsedBody;
    try {
      parsedBody = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;
    } catch (parseError) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Invalid JSON' })
      };
    }

    const { text, style = 'balanced', complexity = 'medium' } = parsedBody || {};

    if (!text || text.trim().length === 0) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Text is required' })
      };
    }

    const processedText = text.length > 1500 ? text.substring(0, 1500) : text;
    
    console.log('ü§ñ X·ª≠ l√Ω vƒÉn b·∫£n, ƒë·ªô d√†i:', processedText.length);
    
    const aiBot = new MindMapAIBot();
    const mindmapData = aiBot.generateMindMap(processedText, style, complexity);
    
    console.log('‚úÖ Ho√†n th√†nh ph√¢n t√≠ch');
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify(mindmapData)
    };

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    
    const aiBot = new MindMapAIBot();
    const fallbackResponse = aiBot.getFallbackMindMap();
    
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify(fallbackResponse)
    };
  }
};
