// netlify/functions/ai-mindmap-bot.js - C·∫¨P NH·∫¨T PH·∫¶N PH√ÇN T√çCH
class MindMapAIBot {
  // ... (gi·ªØ nguy√™n constructor v√† c√°c method c∆° b·∫£n)

  // PH∆Ø∆†NG PH√ÅP T√ìM T·∫ÆT TH√îNG MINH M·ªöI
  summarizeSentence(sentence, maxWords = 10) {
    const words = this.extractWords(sentence);
    
    // Lo·∫°i b·ªè t·ª´ tr√πng l·∫∑p v√† √≠t √Ω nghƒ©a
    const uniqueWords = [...new Set(words)];
    
    // ∆Øu ti√™n t·ª´ d√†i (th∆∞·ªùng ch·ª©a nhi·ªÅu th√¥ng tin h∆°n)
    const meaningfulWords = uniqueWords
      .filter(word => word.length > 3)
      .sort((a, b) => b.length - a.length)
      .slice(0, maxWords);
    
    // T·∫°o c√¢u t√≥m t·∫Øt t·ª± nhi√™n
    if (meaningfulWords.length >= 3) {
      return meaningfulWords.slice(0, 5).join(' ') + '...';
    } else {
      // N·∫øu kh√¥ng ƒë·ªß t·ª´ quan tr·ªçng, c·∫Øt ng·∫Øn c√¢u g·ªëc
      return sentence.length > 60 ? sentence.substring(0, 60) + '...' : sentence;
    }
  }

  // PH√ÇN T√çCH VƒÇN B·∫¢N TH√îNG MINH H∆†N
  analyzeText(text) {
    const sentences = this.splitSentences(text);
    const words = this.extractWords(text);
    const wordFreq = this.calculateWordFrequency(words);
    const keywords = this.extractKeywords(wordFreq);
    
    // T√≥m t·∫Øt c√°c c√¢u thay v√¨ d√πng nguy√™n vƒÉn
    const summarizedSentences = sentences.map(sentence => 
      this.summarizeSentence(sentence, 8)
    );
    
    const scoredSentences = this.scoreSentences(sentences, wordFreq);
    const topics = this.groupSentencesByTopic(scoredSentences, keywords);
    
    return {
      sentences: summarizedSentences, // D√πng c√¢u ƒë√£ t√≥m t·∫Øt
      words,
      wordFreq,
      keywords,
      scoredSentences,
      topics,
      totalSentences: sentences.length,
      totalWords: words.length
    };
  }

  // T·∫†O SUBTOPICS TH√îNG MINH - KH√îNG TR√ôNG L·∫∂P
  createSubTopics(relatedSentences, style) {
    const subTopics = new Set(); // D√πng Set ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    
    relatedSentences.forEach(sentence => {
      // T√≥m t·∫Øt c√¢u th√†nh √Ω ch√≠nh
      const summarized = this.summarizeSentence(sentence, 6);
      
      // ƒê·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p
      if (!subTopics.has(summarized) && summarized.length > 10) {
        subTopics.add(summarized);
      }
    });
    
    // Chuy·ªÉn Set th√†nh Array v√† th√™m style
    return Array.from(subTopics)
      .slice(0, 4)
      .map(topic => {
        if (style === 'creative') {
          const emojis = ['üåü', 'üí´', 'üî•', '‚ö°', 'üéØ', '‚ú®'];
          const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
          return `${randomEmoji} ${topic}`;
        }
        return topic;
      });
  }

  // X√ÅC ƒê·ªäNH CH·ª¶ ƒê·ªÄ TRUNG T√ÇM TH√îNG MINH H∆†N
  determineCentralTopic(analysis) {
    // T√¨m c√¢u c√≥ ƒëi·ªÉm cao nh·∫•t v√† t√≥m t·∫Øt n√≥
    if (analysis.scoredSentences.length > 0) {
      const bestSentence = analysis.scoredSentences[0].text;
      return this.summarizeSentence(bestSentence, 12);
    }
    
    // Fallback: k·∫øt h·ª£p t·ª´ kh√≥a quan tr·ªçng
    const topKeywords = analysis.keywords.slice(0, 3).join(' ‚Ä¢ ');
    return topKeywords || "Ch·ªß ƒë·ªÅ ph√¢n t√≠ch";
  }
}
