const fetch = require('node-fetch');

exports.handler = async (event) => {
  // üîç TH√äM LOGGING ·ªû ƒê√ÇY
  console.log('Event body:', event.body);
  console.log('OpenAI API Key exists:', !!process.env.OPENAI_API_KEY);
  
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json'
  };

  // Handle preflight OPTIONS request
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // Only allow POST
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  try {
    const { text } = JSON.parse(event.body);

    if (!text || text.trim().length === 0) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Text parameter is required' })
      };
    }

    console.log('Processing text length:', text.length);
    
    // Call OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `B·∫°n l√† AI chuy√™n t·∫°o s∆° ƒë·ªì t∆∞ duy. Ph√¢n t√≠ch vƒÉn b·∫£n v√† tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
            {
              "centralTopic": "Ch·ªß ƒë·ªÅ trung t√¢m",
              "mainBranches": [
                {
                  "title": "T√™n nh√°nh ch√≠nh",
                  "subTopics": ["√ù ph·ª• 1", "√ù ph·ª• 2", "√ù ph·ª• 3"]
                }
              ]
            }
            Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng th√™m text n√†o kh√°c.`
          },
          {
            role: 'user',
            content: `T·∫°o s∆° ƒë·ªì t∆∞ duy t·ª´ vƒÉn b·∫£n sau: ${text.substring(0, 3000)}`
          }
        ],
        temperature: 0.7,
        max_tokens: 1500
      })
    });

    // üîç TH√äM LOGGING CHO RESPONSE
    console.log('OpenAI API response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', response.status, errorText);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    console.log('OpenAI API data received');
    
    // Process OpenAI response
    if (data.choices && data.choices[0] && data.choices[0].message) {
      const aiResponse = data.choices[0].message.content;
      console.log('AI Response content:', aiResponse.substring(0, 200) + '...');
      
      // Try to parse JSON from AI response
      try {
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const mindmapData = JSON.parse(jsonMatch[0]);
          console.log('Successfully parsed mindmap data');
          return {
            statusCode: 200,
            headers,
            body: JSON.stringify(mindmapData)
          };
        } else {
          console.log('No JSON found in AI response, using fallback');
          // Fallback data
          return {
            statusCode: 200,
            headers,
            body: JSON.stringify({
              centralTopic: "Ch·ªß ƒë·ªÅ ch√≠nh",
              mainBranches: [
                { 
                  title: "Ph√¢n t√≠ch ch√≠nh", 
                  subTopics: ["ƒêi·ªÉm quan tr·ªçng 1", "ƒêi·ªÉm quan tr·ªçng 2", "ƒêi·ªÉm quan tr·ªçng 3"] 
                },
                { 
                  title: "·ª®ng d·ª•ng", 
                  subTopics: ["C√°ch s·ª≠ d·ª•ng", "L·ª£i √≠ch", "V√≠ d·ª• th·ª±c t·∫ø"] 
                }
              ]
            })
          };
        }
      } catch (parseError) {
        console.error('JSON Parse Error:', parseError);
        // Fallback data
        return {
          statusCode: 200,
          headers,
          body: JSON.stringify({
            centralTopic: "Ch·ªß ƒë·ªÅ t·ª´ vƒÉn b·∫£n",
            mainBranches: [
              { title: "Kh√°i ni·ªám", subTopics: ["ƒê·ªãnh nghƒ©a", "ƒê·∫∑c ƒëi·ªÉm"] },
              { title: "·ª®ng d·ª•ng", subTopics: ["L·ª£i √≠ch", "C√°ch s·ª≠ d·ª•ng"] },
              { title: "V√≠ d·ª•", subTopics: ["Case study", "Best practice"] }
            ]
          })
        };
      }
    } else {
      console.error('Invalid OpenAI response format');
      throw new Error('Invalid response format from OpenAI');
    }

  } catch (error) {
    console.error('Function Error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        error: 'Internal Server Error',
        message: error.message 
      })
    };
  }
};
